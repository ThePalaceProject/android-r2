buildscript {
  if ("$gradle.gradleVersion" != "7.4") {
    throw new GradleException("Gradle version 7.4 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.5.30"

  repositories {
    mavenLocal()
    mavenCentral()
    google()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:7.3.1'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.36.0"
  id "ru.vyarus.animalsniffer" version "1.5.3"
  id "maven-publish"
}

ext {
  androidCompileSDKVersion = 32
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 32

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }

  if (project.hasProperty("org.librarysimplified.no_signing")) {
    disableSigning = true
    logger.warn("org.librarysimplified.no_signing is set: We will not sign artifacts")
  } else {
    disableSigning = false
    logger.warn("org.librarysimplified.no_signing is not set: We will attempt to sign artifacts")
  }
}

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->
  // Workaround for failing readium nanohttpd artifact downloads. Remove this when readium has
  // fixed the issue.
  project.configurations.all {
    resolutionStrategy {
      dependencySubstitution {
        all { DependencySubstitution dependency ->
          if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == 'com.github.edrlab.nanohttpd') {
            dependency.useTarget ('com.github.readium.nanohttpd:' + dependency.requested.module + ':' + dependency.requested.version, 'because nanohttpd ownership changed from edrlab to readium')
          }
        }
      }
    }
  }

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  /*
   * Configure publishing for the various project types.
   */

  switch (POM_PACKAGING) {
    case "jar":
      apply from: file("$rootDir/build_publishing.gradle")
      break

    case "apk":
      break

    case "aar":
      apply from: file("$rootDir/build_publishing.gradle")
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }

    maven { url "https://jitpack.io" }
    google()
  }

  tasks.withType(Test) {
    useJUnitPlatform()
  }
}

/*
 * Add ktlint tasks.
 */

apply from: file("$rootDir/build_ktlint.gradle")

subprojects {
  assemble.dependsOn ktlint
}

/**
 * An empty task called by CI. We don't do semantic versioning analysis here yet.
 */

task verifySemanticVersioning {

}
